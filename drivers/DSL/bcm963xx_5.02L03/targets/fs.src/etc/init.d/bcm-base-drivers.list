# Syntax
# line start with '-' will be treated as a conditinal load driver.
# conditon will be directly followed after '-' and ends with a space, 
# condition can include configures from profile and is evalauted as bash expression. 
# for example:
# -BUILD_FEATURE_A xxx.ko 
#       will only load xxx.ko when BUILD_FEATURE_A is evaluaed true
# -!BUILD_FEATURE_B yyy.ko
#       will only load yyy.ko when BUILD_FEATURE_B is evalued false.

# UBUS capture for debug purposes
extra/ubuscap.ko

extra/rdp_fpm.ko
extra/bdmf.ko 

#I2C
extra/i2c_bcm6xxx.ko
extra/bcm3450.ko
extra/pon_i2c.ko && echo pon_i2c 0x50 > /sys/bus/i2c/devices/i2c-0/new_device && echo pon_i2c 0x51 > /sys/bus/i2c/devices/i2c-0/new_device && echo pon_i2c 0x52 > /sys/bus/i2c/devices/i2c-0/new_device
extra/i2cmux_i2c.ko
extra/sfp_i2c.ko

# PON Driver
extra/opticaldet.ko
extra/bcm_pondrv.ko

# BPM Driver
extra/bcm_bpm.ko

# RDPA depends on bpm initialization
extra/rdpa_gpl.ko
extra/rdpa_gpl_ext.ko
extra/rdpa.ko 

extra/time_sync.ko 
extra/rdpa_mw.ko
extra/bcmbrfp.ko

# General
extra/bcm_spdsvc.ko
extra/chipinfo.ko

# RDPA Command Drivers
extra/rdpa_cmd.ko

extra/bcmxtmrtdrv.ko
extra/pktflow.ko
extra/bcmfap.ko
extra/bcmtm.ko
extra/tdts.ko
extra/dpicore.ko
extra/dpi_qos.ko
extra/flowbond.ko
extra/profdrvdd.ko
extra/bcmxtmcfg.ko
extra/ext_bonding.ko
extra/atmapi.ko
extra/adsldd.ko
extra/blaa_dd.ko
extra/bcmprocfs.ko
kernel/net/ipv6/ipv6.ko
kernel/net/atm/br2684.ko
extra/linux-kernel-bde.ko
extra/linux-user-bde.ko

 # enet depends on moca depends on i2c

extra/bcmmoca.ko

extra/bcm_enet.ko
# moving pktrunner after bcm_enet to get better FlowCache ICache performance
extra/pktrunner.ko
extra/nciTMSkmod.ko
extra/bcmsw.ko && ifconfig bcmsw up
extra/bcm_usb_dev.ko
extra/bcmmcast.ko
extra/bcmarl.ko
extra/bcm_astra.ko

#load SATA/AHCI modules
kernel/drivers/ata/libata.ko
kernel/drivers/ata/libahci.ko
kernel/drivers/ata/ahci.ko
extra/bcm_sata.ko
kernel/drivers/ata/libahci_platform.ko
kernel/drivers/ata/ahci_platform.ko

# pcie configuration save/restore
kernel/arch/arm/plat-bcm63xx/bcm63xx_pcie.ko

# WLAN accelerator module
extra/wfd.ko

# NetXL accelerator module
extra/netxl.ko

#WLAN Module
#sh # PCIe Wireless Card Status - bad card detection
#sh pwlcs_preload()
#sh {
#sh 
#sh   # Check if PWLCS is enabled or not
#sh   # 0/not present - Disabled
#sh   # N             - Enabled for N cards (N is generally 2 or 3)
#sh   # Also need to compile DHD with DSLCPE_PWLCS flag
#sh   MAXPWLCS=`nvram get pwlcsmaxcrd`
#sh   if [ "$MAXPWLCS" == "" ];  then
#sh     MAXPWLCS=0
#sh   fi
#sh 
#sh   if [ $MAXPWLCS != 0 ];  then
#sh     echo "PWLCS:: DHD pre-load processing ..."
#sh     needcommit=0
#sh     card=0
#sh     panic_on_oops=`cat /proc/sys/kernel/panic_on_oops`
#sh 
#sh     #disable panic_on_oops to stop auto rebooting on dhd fail
#sh     echo 0 > /proc/sys/kernel/panic_on_oops
#sh 
#sh     # Initialize card status to GOOD, if not present
#sh     while [ $card -lt $MAXPWLCS ]
#sh     do
#sh       status=`nvram get pwlcspcie$card`
#sh       if [ "$status" == "" ];  then
#sh         echo "PWLCS:: PCIe[$card] status intializing to GOOD"
#sh         nvram set pwlcspcie$card="GOOD"
#sh         needcommit=1
#sh       fi
#sh       echo "PWLCS:: PCIe[$card] pre-load status = $status"
#sh       card=$(($card+1))
#sh     done
#sh 
#sh     # Commit changes if needed
#sh     if [ $needcommit == 1 ];  then
#sh       nvram commit
#sh 	  sync
#sh     fi
#sh   fi
#sh }
#sh 
#sh pwlcs_postload()
#sh {
#sh 
#sh   if [ $MAXPWLCS != 0 ];  then
#sh     echo "PWLCS:: DHD post-load processing ..."
#sh     needcommit=0
#sh     card=0
#sh 
#sh     # Get the updated card status changed by DHD
#sh     while [ $card -lt $MAXPWLCS ]
#sh     do
#sh       status=`nvram get pwlcspcie$card`
#sh       echo "PWLCS:: PCIe[$card] post-load status = $status"
#sh 
#sh       # Save and commit driver changes to the nvram
#sh       nvram set pwlcspcie$card="$status"
#sh       nvram commit
#sh 	  sync
#sh 
#sh       #restore the panic_on_oops for the rest of the system
#sh       echo $panic_on_oops > /proc/sys/kernel/panic_on_oops
#sh 
#sh       # Check if card is a bad card
#sh       case "$status" in
#sh         *BOOT*) 
#sh           ifexists=`cat /proc/net/dev |grep wl$card`
#sh           set -- $ifexists
#sh           if [ "$1" == "" ];  then 
#sh             echo "==============================================================================="
#sh             echo "Detected bad WLAN card on PCIe$card, rebooting system"
#sh             echo "==============================================================================="
#sh             # Trigger magic Sys Request reboot for fast reboot
#sh             echo b > /proc/sysrq-trigger
#sh           fi 
#sh         ;; 
#sh       esac
#sh       card=$(($card+1))
#sh     done
#sh   fi
#sh }
#sh 
extra/wlemf.ko
-BUILD_BRCM_BCA_CPEROUTER extra/hnd.ko
-BUILD_BRCM_BCA_CPEROUTER extra/emf.ko
-BUILD_BRCM_BCA_CPEROUTER extra/igs.ko
#sh pwlcs_preload
-BUILD_BRCM_BCA_CPEROUTER extra/dhd.ko dhd_dpc_prio=5  iface_name=wl  dhd_console_ms=0
-!BUILD_BRCM_HNDROUTER extra/dhd.ko  firmware_path=/etc/wlan/dhd mfg_firmware_path=/etc/wlan/dhd/mfg  dhd_dpc_prio=5  iface_name=wl  dhd_console_ms=0
#sh pwlcs_postload
-!BUILD_BRCM_HNDROUTER extra/wl.ko
-!BUILD_BRCM_HNDROUTER extra/wl-usb.ko

#Voice
extra/dsphal.ko
extra/slicslac.ko
extra/dect.ko

extra/hs_uart_drv.ko

#load usb modules
kernel/drivers/usb/usb-common.ko
kernel/drivers/usb/core/usbcore.ko
kernel/drivers/usb/host/ehci-hcd.ko
kernel/drivers/usb/host/ehci-platform.ko
kernel/drivers/usb/host/ehci-pci.ko
kernel/drivers/usb/host/ohci-hcd.ko
kernel/drivers/usb/host/ohci-platform.ko
kernel/drivers/usb/host/ohci-pci.ko
kernel/drivers/usb/host/xhci-hcd.ko
kernel/drivers/usb/host/xhci-plat-hcd.ko
extra/bcm_usb.ko
kernel/drivers/usb/class/usblp.ko
kernel/drivers/usb/storage/usb-storage.ko
extra/btusbdrv.ko

# other modules

extra/isdn.ko
kernel/drivers/isdn/capi/capi.ko 
extra/bcmvlan.ko
extra/pwrmngtd.ko
kernel/drivers/char/hw_random/rng-core.ko
extra/bcmtrng.ko
extra/bcm2079x-i2c.ko
kernel/drivers/mailbox/mailbox.ko
extra/bcmpdc.ko
extra/bcmspu.ko
extra/cryptodev.ko
extra/spudd.ko

extra/laser_dev.ko
extra/sim_card.ko
extra/i2s.ko
extra/bcm_thermal.ko
extra/bcm_cpuoff.ko

# presecure fullsecure modules
extra/otp.ko

extra/pmd.ko

# Ingress QOS module
# Must be inserted after RDPA
extra/bcm_ingqos.ko

# LTE PCIE driver module
extra/bcm_lte_pcie_drv.ko
